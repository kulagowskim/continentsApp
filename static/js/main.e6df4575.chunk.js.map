{"version":3,"sources":["queries/index.tsx","images/world.svg","pages/Continents.tsx","pages/Home.tsx","pages/Country.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["GET_CONTINENTS","gql","GET_COUNTRIES","Continents","useQuery","loading","error","data","history","useHistory","flexDirection","bgImage","worldBackground","bgPosition","bgRepeat","bgSize","h","alignItems","p","justifyContent","color","continents","map","code","name","flexDir","cursor","onClick","push","redirectToCountries","fontWeight","ml","w","Home","pr","Country","props","variables","match","params","overflow","height","mb","countries","country","gridTemplateColumns","gap","emoji","languages","mr","App","minH","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.e6df4575.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_CONTINENTS = gql`\r\n  query GetContinents {\r\n    continents {\r\n      code\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COUNTRIES = gql`\r\n  query GetCountries($code: String!) {\r\n    countries(filter: { continent: { eq: $code } }) {\r\n      name\r\n      emoji\r\n      languages {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/world.c8ca2eb1.svg\";","import { Button, Flex, Heading, Text } from \"@chakra-ui/react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { GET_CONTINENTS } from \"./../queries\";\r\nimport { IContinentsData } from \"../interfaces/IContinent\";\r\nimport worldBackground from \"./../images/world.svg\";\r\n\r\nconst Continents = () => {\r\n  const { loading, error, data } = useQuery<IContinentsData>(GET_CONTINENTS);\r\n  const history = useHistory();\r\n\r\n  const redirectToHomepage = () => {\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const redirectToCountries = (code) => {\r\n    history.push(`/continents/${code}`);\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      flexDirection=\"column\"\r\n      bgImage={`url(${worldBackground})`}\r\n      bgPosition=\"center\"\r\n      bgRepeat=\"no-repeat\"\r\n      bgSize=\"cover\"\r\n      h=\"100vh\"\r\n      alignItems=\"flex-end\"\r\n      p=\"100px\"\r\n      justifyContent=\"space-between\"\r\n      color=\"white\"\r\n    >\r\n      <Heading>Continents</Heading>\r\n      {loading && <Text color=\"white\">Loading...</Text>}\r\n      {error && <Text color=\"white\">Error ;(</Text>}\r\n      {data &&\r\n        data.continents.map(({ code, name }) => (\r\n          <Flex\r\n            key={code}\r\n            flexDirection=\"column\"\r\n            flexDir=\"row\"\r\n            cursor=\"pointer\"\r\n            onClick={() => redirectToCountries(code)}\r\n          >\r\n            <Text fontWeight=\"bold\">{code}:</Text>\r\n            <Text ml=\"10px\">{name}</Text>\r\n          </Flex>\r\n        ))}\r\n      <Button w=\"200px\" color=\"black\" onClick={() => redirectToHomepage()}>\r\n        Back to homepage\r\n      </Button>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Continents;\r\n","import { Button, Flex } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport worldBackground from \"./../images/world.svg\";\r\n\r\nconst Home = () => {\r\n  const history = useHistory();\r\n\r\n  const handleClick = () => {\r\n    history.push(\"/continents\");\r\n  }\r\n  return (\r\n    <Flex\r\n      w=\"full\"\r\n      h='100vh'\r\n      pr='100px'\r\n      alignItems=\"center\"\r\n      justifyContent=\"flex-end\"\r\n      bgImage={`url(${worldBackground})`}\r\n      bgPosition=\"center\"\r\n      bgRepeat=\"no-repeat\"\r\n      bgSize=\"cover\"\r\n    >\r\n      <Button onClick={() => handleClick()}>Show continents</Button>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useQuery } from \"@apollo/client\";\r\nimport { Button, Flex, Grid, Text } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { ICountriesData } from \"../interfaces/ICountry\";\r\nimport { GET_COUNTRIES } from \"../queries\";\r\nimport worldBackground from \"./../images/world.svg\";\r\n\r\nconst Country = (props) => {\r\n  const { loading, error, data } = useQuery<ICountriesData>(GET_COUNTRIES, {\r\n    variables: { code: props.match.params.code },\r\n  });\r\n  const history = useHistory();\r\n\r\n  const redirectToHomepage = () => {\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const redirectToContinents = () => {\r\n    history.push(\"/continents\");\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      bgImage={`url(${worldBackground})`}\r\n      bgPosition=\"center\"\r\n      bgRepeat=\"no-repeat\"\r\n      bgSize=\"cover\"\r\n      h=\"100vh\"\r\n      alignItems=\"flex-end\"\r\n      p=\"100px\"\r\n      justifyContent=\"flex-end\"\r\n      color=\"white\"\r\n      overflow=\"hidden\"\r\n      flexDirection=\"column\"\r\n    >\r\n      {loading && <Text color=\"white\">Loading...</Text>}\r\n      {error && <Text color=\"white\">Error ;(</Text>}\r\n      <Flex height=\"100%\" flexDirection=\"column\" overflow=\"auto\" mb=\"20px\">\r\n        {data &&\r\n          data?.countries.map((country) => (\r\n            <Grid key={country.name} gridTemplateColumns=\"1fr 30px 100px\" gap='25px'>\r\n              <Text>{country.name}</Text>\r\n              <Text>{country.emoji}</Text>\r\n              <Text>{country.languages[0]?.name}</Text>\r\n            </Grid>\r\n          ))}\r\n      </Flex>\r\n      <Grid gridTemplateColumns=\"1fr 1fr\" color=\"black\">\r\n        <Button w=\"200px\" mr='15px' onClick={() => redirectToHomepage()}>\r\n          Back to homepage\r\n        </Button>\r\n        <Button w=\"200px\" onClick={() => redirectToContinents()}>\r\n          Back to continents\r\n        </Button>\r\n      </Grid>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Country;\r\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ChakraProvider, CSSReset, Box } from \"@chakra-ui/react\";\n\nimport './styles.css';\nimport Continents from \"./pages/Continents\";\nimport Home from \"./pages/Home\";\nimport Country from \"./pages/Country\";\n\nconst App = () => (\n  <ChakraProvider>\n    <CSSReset />\n    <Box minH='100vh'>\n      <Router basename=\"/continentsApp\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/continents\" component={Continents} />\n          <Route path=\"/continents/:code\" component={Country} />\n        </Switch>\n      </Router>\n    </Box>\n  </ChakraProvider>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider\n} from \"@apollo/client\";\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}